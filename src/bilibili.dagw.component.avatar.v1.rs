// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarItem {
    ///
    #[prost(message, optional, tag = "1")]
    pub container_size: ::core::option::Option<super::common::SizeSpec>,
    ///
    #[prost(message, repeated, tag = "2")]
    pub layers: ::prost::alloc::vec::Vec<LayerGroup>,
    ///
    #[prost(message, optional, tag = "3")]
    pub fallback_layers: ::core::option::Option<LayerGroup>,
    ///
    #[prost(int64, tag = "4")]
    pub mid: i64,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BasicLayerResource {
    ///
    #[prost(enumeration = "basic_layer_resource::ResType", tag = "1")]
    pub res_type: i32,
    ///
    #[prost(oneof = "basic_layer_resource::Payload", tags = "2, 3, 4")]
    pub payload: ::core::option::Option<basic_layer_resource::Payload>,
}
/// Nested message and enum types in `BasicLayerResource`.
pub mod basic_layer_resource {
    ///
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ResType {
        ///
        Invalid = 0,
        ///
        Plugin = 1,
        ///
        Empty = 2,
        ///
        Image = 3,
        ///
        Animation = 4,
        ///
        NativeDraw = 5,
    }
    impl ResType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Invalid => "RES_TYPE_INVALID",
                Self::Plugin => "RES_TYPE_PLUGIN",
                Self::Empty => "RES_TYPE_EMPTY",
                Self::Image => "RES_TYPE_IMAGE",
                Self::Animation => "RES_TYPE_ANIMATION",
                Self::NativeDraw => "RES_TYPE_NATIVE_DRAW",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RES_TYPE_INVALID" => Some(Self::Invalid),
                "RES_TYPE_PLUGIN" => Some(Self::Plugin),
                "RES_TYPE_EMPTY" => Some(Self::Empty),
                "RES_TYPE_IMAGE" => Some(Self::Image),
                "RES_TYPE_ANIMATION" => Some(Self::Animation),
                "RES_TYPE_NATIVE_DRAW" => Some(Self::NativeDraw),
                _ => None,
            }
        }
    }
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        ///
        #[prost(message, tag = "2")]
        ResImage(super::ResImage),
        ///
        #[prost(message, tag = "3")]
        ResAnimation(super::ResAnimation),
        ///
        #[prost(message, tag = "4")]
        ResNativeDraw(super::ResNativeDraw),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeneralConfig {
    ///
    #[prost(map = "string, string", tag = "1")]
    pub web_css_style: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Layer {
    ///
    #[prost(string, tag = "1")]
    pub layer_id: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "2")]
    pub visible: bool,
    ///
    #[prost(message, optional, tag = "3")]
    pub general_spec: ::core::option::Option<super::common::LayerGeneralSpec>,
    ///
    #[prost(message, optional, tag = "4")]
    pub layer_config: ::core::option::Option<LayerConfig>,
    ///
    #[prost(message, optional, tag = "5")]
    pub resource: ::core::option::Option<BasicLayerResource>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LayerConfig {
    ///
    #[prost(map = "string, message", tag = "1")]
    pub tags: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        LayerTagConfig,
    >,
    ///
    #[prost(bool, tag = "2")]
    pub is_critical: bool,
    ///
    #[prost(bool, tag = "3")]
    pub allow_over_paint: bool,
    ///
    #[prost(message, optional, tag = "4")]
    pub layer_mask: ::core::option::Option<super::common::MaskProperty>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LayerGroup {
    ///
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub layers: ::prost::alloc::vec::Vec<Layer>,
    ///
    #[prost(message, optional, tag = "3")]
    pub group_mask: ::core::option::Option<super::common::MaskProperty>,
    ///
    #[prost(bool, tag = "4")]
    pub is_critical_group: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LayerTagConfig {
    ///
    #[prost(enumeration = "layer_tag_config::TagConfigType", tag = "1")]
    pub config_type: i32,
    ///
    #[prost(oneof = "layer_tag_config::Config", tags = "2, 3, 4, 5, 6, 7, 8")]
    pub config: ::core::option::Option<layer_tag_config::Config>,
}
/// Nested message and enum types in `LayerTagConfig`.
pub mod layer_tag_config {
    ///
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TagConfigType {
        ///
        TagCfgInvalid = 0,
        ///
        TagCfgGeneral = 1,
        ///
        TagCfgGyro = 2,
        ///
        TagCfgCommentDoubleClick = 3,
        ///
        TagCfgInLive = 4,
        ///
        TagCfgWebInLive = 5,
        ///
        TagCfgFollowIcon = 6,
        ///
        TagCfgFollowAction = 7,
    }
    impl TagConfigType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::TagCfgInvalid => "TAG_CFG_INVALID",
                Self::TagCfgGeneral => "TAG_CFG_GENERAL",
                Self::TagCfgGyro => "TAG_CFG_GYRO",
                Self::TagCfgCommentDoubleClick => "TAG_CFG_COMMENT_DOUBLE_CLICK",
                Self::TagCfgInLive => "TAG_CFG_IN_LIVE",
                Self::TagCfgWebInLive => "TAG_CFG_WEB_IN_LIVE",
                Self::TagCfgFollowIcon => "TAG_CFG_FOLLOW_ICON",
                Self::TagCfgFollowAction => "TAG_CFG_FOLLOW_ACTION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TAG_CFG_INVALID" => Some(Self::TagCfgInvalid),
                "TAG_CFG_GENERAL" => Some(Self::TagCfgGeneral),
                "TAG_CFG_GYRO" => Some(Self::TagCfgGyro),
                "TAG_CFG_COMMENT_DOUBLE_CLICK" => Some(Self::TagCfgCommentDoubleClick),
                "TAG_CFG_IN_LIVE" => Some(Self::TagCfgInLive),
                "TAG_CFG_WEB_IN_LIVE" => Some(Self::TagCfgWebInLive),
                "TAG_CFG_FOLLOW_ICON" => Some(Self::TagCfgFollowIcon),
                "TAG_CFG_FOLLOW_ACTION" => Some(Self::TagCfgFollowAction),
                _ => None,
            }
        }
    }
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Config {
        ///
        #[prost(message, tag = "2")]
        GeneralConfig(super::GeneralConfig),
        ///
        #[prost(message, tag = "3")]
        GyroConfig(super::plugin::GyroConfig),
        ///
        #[prost(message, tag = "4")]
        CommentDoubleClickConfig(super::plugin::CommentDoubleClickConfig),
        ///
        #[prost(message, tag = "5")]
        LiveAnimeConfig(super::plugin::LiveAnimeConfig),
        ///
        #[prost(message, tag = "6")]
        WebLiveAnimeConfig(super::plugin::WebLiveAnimeConfig),
        ///
        #[prost(message, tag = "7")]
        FollowIconConfig(super::plugin::FollowIconConfig),
        ///
        #[prost(message, tag = "8")]
        FollowActionConfig(super::plugin::FollowActionConfig),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAnimation {
    ///
    #[prost(message, optional, tag = "1")]
    pub webp_src: ::core::option::Option<super::common::ResourceSource>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResImage {
    ///
    #[prost(message, optional, tag = "1")]
    pub image_src: ::core::option::Option<super::common::ResourceSource>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResNativeDraw {
    ///
    #[prost(message, optional, tag = "1")]
    pub draw_src: ::core::option::Option<super::common::ResourceSource>,
}
