// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientStatsReq {
    ///
    #[prost(string, tag = "1")]
    pub event_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub encoding: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub app: ::core::option::Option<client_stats_req::App>,
    ///
    #[prost(oneof = "client_stats_req::Payload", tags = "6, 7")]
    pub payload: ::core::option::Option<client_stats_req::Payload>,
}
/// Nested message and enum types in `ClientStatsReq`.
pub mod client_stats_req {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct App {
        ///
        #[prost(string, tag = "1")]
        pub app_name: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "2")]
        pub app_version: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "3")]
        pub sdk_version: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "4")]
        pub platform: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "5")]
        pub network: ::prost::alloc::string::String,
    }
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        ///
        #[prost(bytes, tag = "6")]
        RawPayload(::prost::alloc::vec::Vec<u8>),
        ///
        #[prost(message, tag = "7")]
        PbStatsPayload(super::report::ClientStatsPayload),
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientStatsResp {
    ///
    #[prost(int32, tag = "1")]
    pub report_interval: i32,
    ///
    #[prost(message, optional, tag = "2")]
    pub score: ::core::option::Option<client_stats_resp::Score>,
}
/// Nested message and enum types in `ClientStatsResp`.
pub mod client_stats_resp {
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Score {
        ///
        #[prost(int32, tag = "1")]
        pub up_score: i32,
        ///
        #[prost(int32, tag = "2")]
        pub down_score: i32,
        ///
        #[prost(int32, tag = "3")]
        pub server_up_score: i32,
        ///
        #[prost(int32, tag = "4")]
        pub server_down_score: i32,
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinNotify {
    ///
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<super::bapi_live_rtc_user_proto::User>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<super::bapi_live_rtc_user_proto::User>,
    ///
    #[prost(bool, tag = "2")]
    pub auto_subscribe: bool,
    ///
    #[prost(string, tag = "3")]
    pub token: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinResp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub users: ::prost::alloc::vec::Vec<super::bapi_live_rtc_user_proto::User>,
    ///
    #[prost(int32, tag = "2")]
    pub call_id: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub encode_capability: ::core::option::Option<
        super::bapi_live_rtc_user_proto::CodecCapability,
    >,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveNotify {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(enumeration = "super::bapi_live_rtc_user_proto::UserLeaveReason", tag = "2")]
    pub reason: i32,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveReq {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveResp {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MembersReq {
    ///
    #[prost(int64, tag = "1")]
    pub channel_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub uid: i64,
    ///
    #[prost(int32, tag = "3")]
    pub call_id: i32,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembersResp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub users: ::prost::alloc::vec::Vec<super::bapi_live_rtc_user_proto::User>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageNotify {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int32, tag = "2")]
    pub biz_id: i32,
    ///
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(bool, tag = "4")]
    pub last: bool,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuteNotify {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(enumeration = "MuteReason", tag = "4")]
    pub reason: i32,
    ///
    #[prost(oneof = "mute_notify::MuteStatus", tags = "2, 3")]
    pub mute_status: ::core::option::Option<mute_notify::MuteStatus>,
}
/// Nested message and enum types in `MuteNotify`.
pub mod mute_notify {
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum MuteStatus {
        ///
        #[prost(bool, tag = "2")]
        MuteAudio(bool),
        ///
        #[prost(bool, tag = "3")]
        MuteVideo(bool),
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuteReq {
    ///
    #[prost(oneof = "mute_req::MuteReq", tags = "1, 2")]
    pub mute_req: ::core::option::Option<mute_req::MuteReq>,
}
/// Nested message and enum types in `MuteReq`.
pub mod mute_req {
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum MuteReq {
        ///
        #[prost(bool, tag = "1")]
        MuteAudio(bool),
        ///
        #[prost(bool, tag = "2")]
        MuteVideo(bool),
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PubNotify {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub stream: ::core::option::Option<super::bapi_live_rtc_user_proto::Stream>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubReq {
    ///
    #[prost(string, tag = "1")]
    pub sdp: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub stream: ::core::option::Option<super::bapi_live_rtc_user_proto::Stream>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubResp {
    ///
    #[prost(string, tag = "1")]
    pub sdp: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestMessage {
    ///
    #[prost(int64, tag = "1")]
    pub request_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub channel_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub uid: i64,
    ///
    #[prost(
        oneof = "request_message::Req",
        tags = "4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"
    )]
    pub req: ::core::option::Option<request_message::Req>,
}
/// Nested message and enum types in `RequestMessage`.
pub mod request_message {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Req {
        ///
        #[prost(message, tag = "4")]
        Join(super::JoinReq),
        ///
        #[prost(message, tag = "5")]
        Leave(super::LeaveReq),
        ///
        #[prost(message, tag = "6")]
        Pub(super::PubReq),
        ///
        #[prost(message, tag = "7")]
        Sub(super::SubReq),
        ///
        #[prost(message, tag = "8")]
        UnSub(super::UnSubReq),
        ///
        #[prost(message, tag = "9")]
        Mute(super::MuteReq),
        ///
        #[prost(message, tag = "10")]
        Message(super::UserMsgReq),
        ///
        #[prost(message, tag = "11")]
        Members(super::MembersReq),
        ///
        #[prost(message, tag = "12")]
        UnPub(super::UnPubReq),
        ///
        #[prost(message, tag = "13")]
        UpdateSub(super::UpdateSubReq),
        ///
        #[prost(message, tag = "14")]
        ClientStats(super::ClientStatsReq),
        ///
        #[prost(message, tag = "15")]
        UpdateCodec(super::UpdateCodecReq),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResponseMessage {
    ///
    #[prost(int64, tag = "1")]
    pub request_id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub code: i32,
    ///
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    ///
    #[prost(
        oneof = "response_message::Data",
        tags = "4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
    )]
    pub data: ::core::option::Option<response_message::Data>,
}
/// Nested message and enum types in `ResponseMessage`.
pub mod response_message {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        ///
        #[prost(message, tag = "4")]
        JoinResp(super::JoinResp),
        ///
        #[prost(message, tag = "5")]
        LeaveResp(super::LeaveResp),
        ///
        #[prost(message, tag = "6")]
        PubResp(super::PubResp),
        ///
        #[prost(message, tag = "7")]
        SubResp(super::SubResp),
        ///
        #[prost(message, tag = "8")]
        UnSubResp(super::UnSubResp),
        ///
        #[prost(message, tag = "9")]
        MuteResp(super::UserMuteResp),
        ///
        #[prost(message, tag = "10")]
        MsgResp(super::UserMsgResp),
        ///
        #[prost(message, tag = "11")]
        JoinNotify(super::JoinNotify),
        ///
        #[prost(message, tag = "12")]
        LeaveNotify(super::LeaveNotify),
        ///
        #[prost(message, tag = "13")]
        MuteNotify(super::MuteNotify),
        ///
        #[prost(message, tag = "14")]
        PubNotify(super::PubNotify),
        ///
        #[prost(message, tag = "15")]
        MsgNotify(super::MessageNotify),
        ///
        #[prost(message, tag = "16")]
        MembersResp(super::MembersResp),
        ///
        #[prost(message, tag = "17")]
        TokenNotify(super::TokenNotify),
        ///
        #[prost(message, tag = "18")]
        UnPubResp(super::UnPubResp),
        ///
        #[prost(message, tag = "19")]
        UnPubNotify(super::UnPubNotify),
        ///
        #[prost(message, tag = "20")]
        UpdateSubResp(super::UpdateSubResp),
        ///
        #[prost(message, tag = "21")]
        ClientStatsResp(super::ClientStatsResp),
        ///
        #[prost(message, tag = "22")]
        UpdateCodecResp(super::UpdateCodecResp),
        ///
        #[prost(message, tag = "23")]
        UpdateCodecNotify(super::UpdateCodecNotify),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubReq {
    ///
    #[prost(message, repeated, tag = "2")]
    pub sub_users: ::prost::alloc::vec::Vec<sub_req::SubUser>,
    ///
    #[prost(bool, tag = "3")]
    pub pause_send: bool,
    ///
    #[prost(oneof = "sub_req::SubOffer", tags = "1")]
    pub sub_offer: ::core::option::Option<sub_req::SubOffer>,
}
/// Nested message and enum types in `SubReq`.
pub mod sub_req {
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct SubUser {
        ///
        #[prost(int64, tag = "1")]
        pub uid: i64,
        ///
        #[prost(bool, tag = "2")]
        pub sub_video: bool,
        ///
        #[prost(bool, tag = "3")]
        pub sub_audio: bool,
        ///
        #[prost(int32, tag = "4")]
        pub video_index: i32,
    }
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum SubOffer {
        ///
        #[prost(string, tag = "1")]
        Sdp(::prost::alloc::string::String),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubResp {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(string, tag = "2")]
    pub sdp: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenNotify {
    ///
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnPubNotify {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub stream: ::core::option::Option<super::bapi_live_rtc_user_proto::Stream>,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnPubReq {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnPubResp {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnSubReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnSubResp {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateCodecNotify {
    ///
    #[prost(message, optional, tag = "1")]
    pub encode_capability: ::core::option::Option<
        super::bapi_live_rtc_user_proto::CodecCapability,
    >,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateCodecReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub decode_capability: ::core::option::Option<
        super::bapi_live_rtc_user_proto::CodecCapability,
    >,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateCodecResp {}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateSubReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(oneof = "update_sub_req::AudioOption", tags = "2")]
    pub audio_option: ::core::option::Option<update_sub_req::AudioOption>,
}
/// Nested message and enum types in `UpdateSubReq`.
pub mod update_sub_req {
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct VideoPreferLayer {
        ///
        #[prost(int32, tag = "1")]
        pub video_index: i32,
        ///
        #[prost(oneof = "video_prefer_layer::VideoTemporalLayerOption", tags = "2")]
        pub video_temporal_layer_option: ::core::option::Option<
            video_prefer_layer::VideoTemporalLayerOption,
        >,
    }
    /// Nested message and enum types in `video_prefer_layer`.
    pub mod video_prefer_layer {
        ///
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum VideoTemporalLayerOption {
            ///
            #[prost(int32, tag = "2")]
            TemporalIndex(i32),
        }
    }
    ///
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum AudioOption {
        ///
        #[prost(bool, tag = "2")]
        SubAudio(bool),
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateSubResp {}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserMsgReq {
    ///
    #[prost(int32, tag = "1")]
    pub biz_id: i32,
    ///
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(bool, tag = "3")]
    pub last: bool,
    ///
    #[prost(int64, repeated, tag = "4")]
    pub receivers: ::prost::alloc::vec::Vec<i64>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserMsgResp {
    ///
    #[prost(int64, repeated, tag = "1")]
    pub sent_uids: ::prost::alloc::vec::Vec<i64>,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserMuteResp {}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MuteReason {
    ///
    UserMute = 0,
    ///
    AdminMute = 1,
}
impl MuteReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UserMute => "UserMute",
            Self::AdminMute => "AdminMute",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UserMute" => Some(Self::UserMute),
            "AdminMute" => Some(Self::AdminMute),
            _ => None,
        }
    }
}
