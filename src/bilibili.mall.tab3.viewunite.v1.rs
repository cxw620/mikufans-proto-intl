// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityResource {
    ///
    #[prost(string, tag = "1")]
    pub dark_text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub divider_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub selected_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub light_text_color: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Arc {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub duration: i64,
    ///
    #[prost(message, optional, tag = "4")]
    pub stat: ::core::option::Option<super::common::Stat>,
    ///
    #[prost(string, tag = "5")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub copyright: i32,
    ///
    #[prost(message, optional, tag = "7")]
    pub right: ::core::option::Option<Rights>,
    ///
    #[prost(string, tag = "8")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub type_id: i64,
    ///
    #[prost(string, tag = "10")]
    pub title: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArcRefreshReply {
    ///
    #[prost(message, optional, tag = "1")]
    pub stat: ::core::option::Option<super::common::Stat>,
    ///
    #[prost(message, optional, tag = "2")]
    pub req_user: ::core::option::Option<SimpleReqUser>,
    ///
    #[prost(message, optional, tag = "3")]
    pub arc: ::core::option::Option<SimpleArc>,
    ///
    #[prost(message, optional, tag = "4")]
    pub online: ::core::option::Option<Online>,
    ///
    #[prost(message, optional, tag = "5")]
    pub like_config: ::core::option::Option<LikeConfig>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArcRefreshReq {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(string, tag = "2")]
    pub bvid: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttentionCard {
    ///
    #[prost(message, repeated, tag = "1")]
    pub show_time: ::prost::alloc::vec::Vec<ShowTime>,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BizFollowVideoParam {
    ///
    #[prost(int64, tag = "1")]
    pub season_id: i64,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BizJumpLinkParam {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BizReserveActivityParam {
    ///
    #[prost(int64, tag = "1")]
    pub activity_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub reserve_id: i64,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BizReserveGameParam {
    ///
    #[prost(int64, tag = "1")]
    pub game_id: i64,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Button {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "JumpShowType", tag = "4")]
    pub jump_show_type: i32,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cm {
    ///
    #[prost(message, optional, tag = "1")]
    pub cm_under_player: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(message, optional, tag = "2")]
    pub ads_control: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(message, repeated, tag = "3")]
    pub source_content: ::prost::alloc::vec::Vec<::prost_types::Any>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChargingPlus {
    ///
    #[prost(bool, tag = "1")]
    pub pass: bool,
    ///
    #[prost(message, repeated, tag = "2")]
    pub play_toast: ::prost::alloc::vec::Vec<PlayToast>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chronos {
    ///
    #[prost(string, tag = "1")]
    pub md5: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub sign: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChronosParam {
    ///
    #[prost(string, tag = "1")]
    pub engine_version: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub message_protocol: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub service_key: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandDm {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub mid: i64,
    ///
    #[prost(string, tag = "4")]
    pub command: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub progress: i32,
    ///
    #[prost(string, tag = "7")]
    pub ctime: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub mtime: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub extra: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub id_str: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
    ///
    #[prost(message, optional, tag = "1")]
    pub online: ::core::option::Option<Online>,
    ///
    #[prost(message, optional, tag = "2")]
    pub player_icon: ::core::option::Option<PlayerIcon>,
    ///
    #[prost(message, optional, tag = "3")]
    pub story_entrance: ::core::option::Option<StoryEntrance>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractCard {
    ///
    #[prost(float, tag = "1")]
    pub display_progress: f32,
    ///
    #[prost(int64, tag = "2")]
    pub display_accuracy: i64,
    ///
    #[prost(int64, tag = "3")]
    pub display_duration: i64,
    ///
    #[prost(int32, tag = "4")]
    pub show_mode: i32,
    ///
    #[prost(int32, tag = "5")]
    pub page_type: i32,
    ///
    #[prost(message, optional, tag = "6")]
    pub upper: ::core::option::Option<UpperInfos>,
    ///
    #[prost(int32, tag = "7")]
    pub is_follow_display: i32,
    ///
    #[prost(message, optional, tag = "8")]
    pub text: ::core::option::Option<ContractText>,
    ///
    #[prost(int64, tag = "9")]
    pub follow_display_end_duration: i64,
    ///
    #[prost(int32, tag = "10")]
    pub is_play_display: i32,
    ///
    #[prost(int32, tag = "11")]
    pub is_interact_display: i32,
    ///
    #[prost(bool, tag = "12")]
    pub play_display_switch: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractText {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub inline_title: ::prost::alloc::string::String,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Control {
    ///
    #[prost(bool, tag = "1")]
    pub limit: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DmResource {
    ///
    #[prost(message, repeated, tag = "1")]
    pub command_dms: ::prost::alloc::vec::Vec<CommandDm>,
    ///
    #[prost(message, optional, tag = "2")]
    pub attention: ::core::option::Option<AttentionCard>,
    ///
    #[prost(message, repeated, tag = "3")]
    pub cards: ::prost::alloc::vec::Vec<OperationCard>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ECodeConfig {
    ///
    #[prost(string, tag = "1")]
    pub redirect_url: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IconData {
    ///
    #[prost(string, tag = "1")]
    pub meta_json: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub sprits_img: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IntroductionTab {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub modules: ::prost::alloc::vec::Vec<super::common::Module>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeConfig {
    ///
    #[prost(message, optional, tag = "1")]
    pub triple_like: ::core::option::Option<super::common::UpLikeImg>,
    ///
    #[prost(string, tag = "2")]
    pub like_animation: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Material {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "MaterialBizType", tag = "4")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "5")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub static_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub bg_pic: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub jump_type: i32,
    ///
    #[prost(enumeration = "PageType", tag = "10")]
    pub page_type: i32,
    ///
    #[prost(bool, tag = "11")]
    pub need_login: bool,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Online {
    ///
    #[prost(bool, tag = "1")]
    pub online_show: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationCard {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub from: i32,
    ///
    #[prost(int32, tag = "3")]
    pub to: i32,
    ///
    #[prost(bool, tag = "4")]
    pub status: bool,
    ///
    #[prost(enumeration = "BizType", tag = "5")]
    pub biz_type: i32,
    ///
    #[prost(message, optional, tag = "6")]
    pub content: ::core::option::Option<OperationCardContent>,
    ///
    #[prost(oneof = "operation_card::Param", tags = "7, 8, 9, 10")]
    pub param: ::core::option::Option<operation_card::Param>,
}
/// Nested message and enum types in `OperationCard`.
pub mod operation_card {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Param {
        ///
        #[prost(message, tag = "7")]
        Follow(super::BizFollowVideoParam),
        ///
        #[prost(message, tag = "8")]
        Reserve(super::BizReserveActivityParam),
        ///
        #[prost(message, tag = "9")]
        Jump(super::BizJumpLinkParam),
        ///
        #[prost(message, tag = "10")]
        Game(super::BizReserveGameParam),
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationCardContent {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub button_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub button_selected_title: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "6")]
    pub show_selected: bool,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PageControl {
    ///
    #[prost(message, optional, tag = "1")]
    pub toast_show: ::core::option::Option<Control>,
    ///
    #[prost(message, optional, tag = "2")]
    pub material_show: ::core::option::Option<Control>,
    ///
    #[prost(message, optional, tag = "3")]
    pub up_show: ::core::option::Option<Control>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayToast {
    ///
    #[prost(enumeration = "PlayToastEnum", tag = "1")]
    pub business: i32,
    ///
    #[prost(string, tag = "2")]
    pub icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerIcon {
    ///
    #[prost(string, tag = "1")]
    pub url1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub hash1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub url2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub hash2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub drag_left_png: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub middle_png: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub drag_right_png: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub drag_data: ::core::option::Option<IconData>,
    ///
    #[prost(message, optional, tag = "9")]
    pub nodrag_data: ::core::option::Option<IconData>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PointMaterial {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "MaterialSource", tag = "2")]
    pub material_source: i32,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relate {
    ///
    #[prost(int64, tag = "1")]
    pub device_type: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelatesFeedReply {
    ///
    #[prost(message, repeated, tag = "1")]
    pub relates: ::prost::alloc::vec::Vec<super::common::RelateCard>,
    ///
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelatesFeedReq {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(string, tag = "2")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub from_spmid: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub player_args: ::core::option::Option<
        super::super::super::super::app::archive::middleware::v1::PlayerArgs,
    >,
    ///
    #[prost(message, optional, tag = "7")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
    ///
    #[prost(string, tag = "8")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub auto_play: i64,
    ///
    #[prost(string, tag = "10")]
    pub from_track_id: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplyStyle {
    ///
    #[prost(string, tag = "1")]
    pub badge_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub badge_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub badge_type: i64,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplyTab {
    ///
    #[prost(message, optional, tag = "1")]
    pub reply_style: ::core::option::Option<ReplyStyle>,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub control: ::core::option::Option<TabControl>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUser {
    ///
    #[prost(int32, tag = "1")]
    pub favorite: i32,
    ///
    #[prost(int32, tag = "2")]
    pub like: i32,
    ///
    #[prost(int32, tag = "3")]
    pub coin: i32,
    ///
    #[prost(int32, tag = "4")]
    pub fav_season: i32,
    ///
    #[prost(int32, tag = "5")]
    pub follow: i32,
    ///
    #[prost(int32, tag = "6")]
    pub dislike: i32,
    ///
    #[prost(message, optional, tag = "7")]
    pub elec_plus_btn: ::core::option::Option<Button>,
    ///
    #[prost(message, optional, tag = "8")]
    pub charging_plus: ::core::option::Option<ChargingPlus>,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Rights {
    ///
    #[prost(bool, tag = "1")]
    pub only_vip_download: bool,
    ///
    #[prost(bool, tag = "2")]
    pub no_reprint: bool,
    ///
    #[prost(bool, tag = "3")]
    pub download: bool,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowTime {
    ///
    #[prost(int32, tag = "1")]
    pub start_time: i32,
    ///
    #[prost(int32, tag = "2")]
    pub end_time: i32,
    ///
    #[prost(double, tag = "3")]
    pub pos_x: f64,
    ///
    #[prost(double, tag = "4")]
    pub pos_y: f64,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SimpleArc {
    ///
    #[prost(int32, tag = "1")]
    pub copyright: i32,
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SimpleReqUser {
    ///
    #[prost(int32, tag = "1")]
    pub favorite: i32,
    ///
    #[prost(int32, tag = "2")]
    pub like: i32,
    ///
    #[prost(int32, tag = "3")]
    pub coin: i32,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryEntrance {
    ///
    #[prost(bool, tag = "1")]
    pub arc_play_story: bool,
    ///
    #[prost(string, tag = "2")]
    pub story_icon: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "3")]
    pub arc_landscape_story: bool,
    ///
    #[prost(string, tag = "4")]
    pub landscape_icon: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "5")]
    pub play_story: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tab {
    ///
    #[prost(message, repeated, tag = "1")]
    pub tab_module: ::prost::alloc::vec::Vec<TabModule>,
    ///
    #[prost(string, tag = "2")]
    pub tab_bg: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub danmaku_entrance: ::core::option::Option<TabControl>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TabControl {
    ///
    #[prost(bool, tag = "1")]
    pub limit: bool,
    ///
    #[prost(bool, tag = "2")]
    pub disable: bool,
    ///
    #[prost(string, tag = "3")]
    pub disable_click_tip: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TabModule {
    ///
    #[prost(enumeration = "TabType", tag = "1")]
    pub tab_type: i32,
    ///
    #[prost(oneof = "tab_module::Tab", tags = "2, 3, 4")]
    pub tab: ::core::option::Option<tab_module::Tab>,
}
/// Nested message and enum types in `TabModule`.
pub mod tab_module {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Tab {
        ///
        #[prost(message, tag = "2")]
        Introduction(super::IntroductionTab),
        ///
        #[prost(message, tag = "3")]
        Reply(super::ReplyTab),
        ///
        #[prost(message, tag = "4")]
        ActivityTab(super::super::common::ActivityTab),
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpperInfos {
    ///
    #[prost(int64, tag = "1")]
    pub fans_count: i64,
    ///
    #[prost(int64, tag = "2")]
    pub arc_count_last_half_year: i64,
    ///
    #[prost(int64, tag = "3")]
    pub first_up_dates: i64,
    ///
    #[prost(int64, tag = "4")]
    pub total_play_count: i64,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoGuide {
    ///
    #[prost(message, repeated, tag = "1")]
    pub material: ::prost::alloc::vec::Vec<Material>,
    ///
    #[prost(message, optional, tag = "2")]
    pub video_point: ::core::option::Option<VideoViewPoint>,
    ///
    #[prost(message, optional, tag = "3")]
    pub contract_card: ::core::option::Option<ContractCard>,
    ///
    #[prost(message, optional, tag = "4")]
    pub right_material: ::core::option::Option<Material>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoPoint {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub from: i64,
    ///
    #[prost(int64, tag = "3")]
    pub to: i64,
    ///
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub logo_url: ::prost::alloc::string::String,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoShot {
    ///
    #[prost(string, tag = "1")]
    pub pv_data: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub img_x_len: i32,
    ///
    #[prost(int32, tag = "3")]
    pub img_y_len: i32,
    ///
    #[prost(int32, tag = "4")]
    pub img_x_size: i32,
    ///
    #[prost(int32, tag = "5")]
    pub img_y_size: i32,
    ///
    #[prost(string, repeated, tag = "6")]
    pub image: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoViewPoint {
    ///
    #[prost(message, repeated, tag = "1")]
    pub points: ::prost::alloc::vec::Vec<VideoPoint>,
    ///
    #[prost(message, optional, tag = "2")]
    pub point_material: ::core::option::Option<PointMaterial>,
    ///
    #[prost(bool, tag = "3")]
    pub point_permanent: bool,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewBase {
    ///
    #[prost(
        enumeration = "super::super::super::super::playershared::BizType",
        tag = "1"
    )]
    pub biz_type: i32,
    ///
    #[prost(enumeration = "PageCategory", tag = "2")]
    pub page_type: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub control: ::core::option::Option<PageControl>,
    ///
    #[prost(message, optional, tag = "4")]
    pub activity_resource: ::core::option::Option<ActivityResource>,
    ///
    #[prost(message, optional, tag = "5")]
    pub config: ::core::option::Option<Config>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewProgressReply {
    ///
    #[prost(message, optional, tag = "1")]
    pub video_guide: ::core::option::Option<VideoGuide>,
    ///
    #[prost(message, optional, tag = "2")]
    pub chronos: ::core::option::Option<Chronos>,
    ///
    #[prost(message, optional, tag = "3")]
    pub arc_shot: ::core::option::Option<VideoShot>,
    ///
    #[prost(message, optional, tag = "4")]
    pub dm: ::core::option::Option<DmResource>,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewProgressReq {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub up_mid: i64,
    ///
    #[prost(message, optional, tag = "4")]
    pub chronos_param: ::core::option::Option<ChronosParam>,
    ///
    #[prost(enumeration = "UnionType", tag = "5")]
    pub r#type: i32,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewReply {
    ///
    #[prost(message, optional, tag = "1")]
    pub view_base: ::core::option::Option<ViewBase>,
    ///
    #[prost(message, optional, tag = "2")]
    pub arc: ::core::option::Option<Arc>,
    ///
    #[prost(message, optional, tag = "3")]
    pub req_user: ::core::option::Option<ReqUser>,
    ///
    #[prost(message, optional, tag = "4")]
    pub owner: ::core::option::Option<super::common::Owner>,
    ///
    #[prost(message, optional, tag = "5")]
    pub tab: ::core::option::Option<Tab>,
    ///
    #[prost(message, optional, tag = "6")]
    pub supplement: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(message, optional, tag = "7")]
    pub cm: ::core::option::Option<Cm>,
    ///
    #[prost(enumeration = "ECode", tag = "8")]
    pub ecode: i32,
    ///
    #[prost(message, optional, tag = "9")]
    pub ecode_config: ::core::option::Option<ECodeConfig>,
    ///
    #[prost(map = "string, string", tag = "10")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewReq {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(string, tag = "2")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub from_spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub player_args: ::core::option::Option<
        super::super::super::super::app::archive::middleware::v1::PlayerArgs,
    >,
    ///
    #[prost(string, tag = "8")]
    pub track_id: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "9")]
    pub extra_content: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(string, tag = "10")]
    pub play_mode: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub relate: ::core::option::Option<Relate>,
    ///
    #[prost(string, tag = "12")]
    pub biz_extra: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub ad_extra: ::prost::alloc::string::String,
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BizType {
    ///
    None = 0,
    ///
    FollowVideo = 1,
    ///
    ReserveActivity = 2,
    ///
    JumpLink = 3,
    ///
    FavSeason = 4,
    ///
    ReserveGame = 5,
}
impl BizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BizTypeNone",
            Self::FollowVideo => "BizTypeFollowVideo",
            Self::ReserveActivity => "BizTypeReserveActivity",
            Self::JumpLink => "BizTypeJumpLink",
            Self::FavSeason => "BizTypeFavSeason",
            Self::ReserveGame => "BizTypeReserveGame",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BizTypeNone" => Some(Self::None),
            "BizTypeFollowVideo" => Some(Self::FollowVideo),
            "BizTypeReserveActivity" => Some(Self::ReserveActivity),
            "BizTypeJumpLink" => Some(Self::JumpLink),
            "BizTypeFavSeason" => Some(Self::FavSeason),
            "BizTypeReserveGame" => Some(Self::ReserveGame),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ECode {
    ///
    CodeDefault = 0,
    ///
    Code404 = 1,
    ///
    CodeTeenager = 78301,
}
impl ECode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CodeDefault => "CODE_DEFAULT",
            Self::Code404 => "CODE_404",
            Self::CodeTeenager => "CODE_TEENAGER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CODE_DEFAULT" => Some(Self::CodeDefault),
            "CODE_404" => Some(Self::Code404),
            "CODE_TEENAGER" => Some(Self::CodeTeenager),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JumpShowType {
    ///
    JstDefault = 0,
    ///
    JstFullscreen = 1,
    ///
    JstHalfscreen = 2,
}
impl JumpShowType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JstDefault => "JST_DEFAULT",
            Self::JstFullscreen => "JST_FULLSCREEN",
            Self::JstHalfscreen => "JST_HALFSCREEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JST_DEFAULT" => Some(Self::JstDefault),
            "JST_FULLSCREEN" => Some(Self::JstFullscreen),
            "JST_HALFSCREEN" => Some(Self::JstHalfscreen),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MaterialBizType {
    ///
    None = 0,
    ///
    Activity = 1,
    ///
    Bgm = 2,
    ///
    Effect = 3,
    ///
    ShootSame = 4,
    ///
    ShootTogether = 5,
    ///
    ActivityIcon = 6,
    ///
    NewBgm = 7,
}
impl MaterialBizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::Activity => "ACTIVITY",
            Self::Bgm => "BGM",
            Self::Effect => "EFFECT",
            Self::ShootSame => "SHOOT_SAME",
            Self::ShootTogether => "SHOOT_TOGETHER",
            Self::ActivityIcon => "ACTIVITY_ICON",
            Self::NewBgm => "NEW_BGM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "ACTIVITY" => Some(Self::Activity),
            "BGM" => Some(Self::Bgm),
            "EFFECT" => Some(Self::Effect),
            "SHOOT_SAME" => Some(Self::ShootSame),
            "SHOOT_TOGETHER" => Some(Self::ShootTogether),
            "ACTIVITY_ICON" => Some(Self::ActivityIcon),
            "NEW_BGM" => Some(Self::NewBgm),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MaterialSource {
    ///
    Default = 0,
    ///
    Bijian = 1,
}
impl MaterialSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "DEFAULT",
            Self::Bijian => "BIJIAN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEFAULT" => Some(Self::Default),
            "BIJIAN" => Some(Self::Bijian),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PageCategory {
    ///
    CommonPage = 0,
    ///
    ActivityPage = 1,
}
impl PageCategory {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CommonPage => "COMMON_PAGE",
            Self::ActivityPage => "ACTIVITY_PAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMMON_PAGE" => Some(Self::CommonPage),
            "ACTIVITY_PAGE" => Some(Self::ActivityPage),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PageType {
    ///
    H5 = 0,
    ///
    Na = 1,
}
impl PageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::H5 => "H5",
            Self::Na => "NA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "H5" => Some(Self::H5),
            "NA" => Some(Self::Na),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayToastEnum {
    ///
    PlaytoastUnknown = 0,
    ///
    PlaytoastChargingplus = 1,
}
impl PlayToastEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlaytoastUnknown => "PLAYTOAST_UNKNOWN",
            Self::PlaytoastChargingplus => "PLAYTOAST_CHARGINGPLUS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYTOAST_UNKNOWN" => Some(Self::PlaytoastUnknown),
            "PLAYTOAST_CHARGINGPLUS" => Some(Self::PlaytoastChargingplus),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TabType {
    ///
    TabNone = 0,
    ///
    TabIntroduction = 1,
    ///
    TabReply = 2,
    ///
    TabOgvActivity = 3,
}
impl TabType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TabNone => "TAB_NONE",
            Self::TabIntroduction => "TAB_INTRODUCTION",
            Self::TabReply => "TAB_REPLY",
            Self::TabOgvActivity => "TAB_OGV_ACTIVITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAB_NONE" => Some(Self::TabNone),
            "TAB_INTRODUCTION" => Some(Self::TabIntroduction),
            "TAB_REPLY" => Some(Self::TabReply),
            "TAB_OGV_ACTIVITY" => Some(Self::TabOgvActivity),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UnionType {
    ///
    Ugc = 0,
    ///
    Ogv = 1,
}
impl UnionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ugc => "UGC",
            Self::Ogv => "OGV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UGC" => Some(Self::Ugc),
            "OGV" => Some(Self::Ogv),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod view_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    #[derive(Debug, Clone)]
    pub struct ViewClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ViewClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ViewClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ViewClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        pub async fn arc_refresh(
            &mut self,
            request: impl tonic::IntoRequest<super::ArcRefreshReq>,
        ) -> std::result::Result<
            tonic::Response<super::ArcRefreshReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.mall.tab3.viewunite.v1.View/ArcRefresh",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.mall.tab3.viewunite.v1.View", "ArcRefresh"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn relates_feed(
            &mut self,
            request: impl tonic::IntoRequest<super::RelatesFeedReq>,
        ) -> std::result::Result<
            tonic::Response<super::RelatesFeedReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.mall.tab3.viewunite.v1.View/RelatesFeed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.mall.tab3.viewunite.v1.View",
                        "RelatesFeed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn view(
            &mut self,
            request: impl tonic::IntoRequest<super::ViewReq>,
        ) -> std::result::Result<tonic::Response<super::ViewReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.mall.tab3.viewunite.v1.View/View",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bilibili.mall.tab3.viewunite.v1.View", "View"));
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn view_progress(
            &mut self,
            request: impl tonic::IntoRequest<super::ViewProgressReq>,
        ) -> std::result::Result<
            tonic::Response<super::ViewProgressReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.mall.tab3.viewunite.v1.View/ViewProgress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.mall.tab3.viewunite.v1.View",
                        "ViewProgress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod view_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ViewServer.
    #[async_trait]
    pub trait View: std::marker::Send + std::marker::Sync + 'static {
        ///
        async fn arc_refresh(
            &self,
            request: tonic::Request<super::ArcRefreshReq>,
        ) -> std::result::Result<tonic::Response<super::ArcRefreshReply>, tonic::Status>;
        ///
        async fn relates_feed(
            &self,
            request: tonic::Request<super::RelatesFeedReq>,
        ) -> std::result::Result<
            tonic::Response<super::RelatesFeedReply>,
            tonic::Status,
        >;
        ///
        async fn view(
            &self,
            request: tonic::Request<super::ViewReq>,
        ) -> std::result::Result<tonic::Response<super::ViewReply>, tonic::Status>;
        ///
        async fn view_progress(
            &self,
            request: tonic::Request<super::ViewProgressReq>,
        ) -> std::result::Result<
            tonic::Response<super::ViewProgressReply>,
            tonic::Status,
        >;
    }
    ///
    #[derive(Debug)]
    pub struct ViewServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ViewServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ViewServer<T>
    where
        T: View,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/bilibili.mall.tab3.viewunite.v1.View/ArcRefresh" => {
                    #[allow(non_camel_case_types)]
                    struct ArcRefreshSvc<T: View>(pub Arc<T>);
                    impl<T: View> tonic::server::UnaryService<super::ArcRefreshReq>
                    for ArcRefreshSvc<T> {
                        type Response = super::ArcRefreshReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ArcRefreshReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as View>::arc_refresh(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ArcRefreshSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.mall.tab3.viewunite.v1.View/RelatesFeed" => {
                    #[allow(non_camel_case_types)]
                    struct RelatesFeedSvc<T: View>(pub Arc<T>);
                    impl<T: View> tonic::server::UnaryService<super::RelatesFeedReq>
                    for RelatesFeedSvc<T> {
                        type Response = super::RelatesFeedReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RelatesFeedReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as View>::relates_feed(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RelatesFeedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.mall.tab3.viewunite.v1.View/View" => {
                    #[allow(non_camel_case_types)]
                    struct ViewSvc<T: View>(pub Arc<T>);
                    impl<T: View> tonic::server::UnaryService<super::ViewReq>
                    for ViewSvc<T> {
                        type Response = super::ViewReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ViewReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as View>::view(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ViewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.mall.tab3.viewunite.v1.View/ViewProgress" => {
                    #[allow(non_camel_case_types)]
                    struct ViewProgressSvc<T: View>(pub Arc<T>);
                    impl<T: View> tonic::server::UnaryService<super::ViewProgressReq>
                    for ViewProgressSvc<T> {
                        type Response = super::ViewProgressReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ViewProgressReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as View>::view_progress(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ViewProgressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ViewServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "bilibili.mall.tab3.viewunite.v1.View";
    impl<T> tonic::server::NamedService for ViewServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
